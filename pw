#!/usr/bin/python

"""
Install local Python 2.7 dependency:
  - sudo pip install pycrypto
  - sudo pip install pyperclip
"""


import argparse
import getpass
import json
import os
import pyperclip
import sys
import time

from hashlib import md5
from base64 import b64decode
from base64 import b64encode
from Crypto import Random
from Crypto.Cipher import AES


home_dir=os.path.expanduser('~')
pw_file='%s/.pw-encr' % home_dir

BLOCK_SIZE = 16
pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * chr(BLOCK_SIZE - len(s) % BLOCK_SIZE)
unpad = lambda s: s[:-ord(s[-1])]


def check_file():
    if os.path.isfile(pw_file):
        data = read_file()
        parser = build_parser(data)
        args = parser.parse_args()
        count = count_args(args)
        process_input(data, parser, args, count)
    else:
        create_file()


def create_file():
    print("\nNo password json file found; please run the command 'pw-encryptor' to get started\n")


def read_file():
    try:
        data = json.load(open(pw_file))
    except ValueError:
        print("\njson formatting error; exiting...\n")
        sys.exit()
    return data


def build_parser(data):
    parser = argparse.ArgumentParser(prog='pw', add_help=False, description='Retrieve passwords from encrypted storage')

    help = parser.add_argument_group('Help')
    help.add_argument('-h', '--help', dest='help', action='store_true', default=False, help='Show this help message and exit')

    individual_services = parser.add_argument_group('Accounts')
    for service in sorted(data.iterkeys()):
        individual_services.add_argument('--%s' % service, dest=service, action='store_true', default=False, help=data[service]["username"])

    return parser


def count_args(args):
    count = 0
    for service in sorted(vars(args)):
        if getattr(args, service):
            count += 1
    return count


def process_input(data, parser, args, count):
    if args.help or count == 0:
        print
        parser.print_help()
        print
    elif count > 1:
        print("Please select only one account at a time")
        time.sleep(2)
        backtrack(1)
    else:
        try:
            pin = getpass.getpass(prompt='Password: ', stream=sys.stderr)
            backtrack(1)
            print("SUCCESS - Password copied to clipboard")

            for service in sorted(data.iterkeys()):
                if getattr(args, service):
                    pyperclip.copy(decrypt(pin, data[service]["encr_secret"]))
            time.sleep(2)
            backtrack(1)

        except KeyboardInterrupt:
            keyboard_interrupt(0)

        except UnicodeDecodeError:
            decode_error(2)


def decrypt(pin, enc):
    enc = b64decode(enc)
    iv = enc[:16]
    cipher = AES.new(keygen(pin), AES.MODE_CBC, iv)
    return unpad(cipher.decrypt(enc[16:])).decode('utf8')


def keygen(key):
    return md5(key.encode('utf8')).hexdigest()


def backtrack(rows):
    for x in range(rows):
        sys.stderr.write("\033[1A\033[2K")


def keyboard_interrupt(rows):
    sys.stderr.write("\033[2K")
    backtrack(rows)
    sys.stderr.write("\nInput cancelled; exiting...\n\n")
    time.sleep(2)
    backtrack(3)


def decode_error(rows):
    backtrack(rows)
    sys.stderr.write("\nBad PIN; exiting...\n\n")
    time.sleep(2)
    backtrack(3)


if __name__ == "__main__":
    check_file()

